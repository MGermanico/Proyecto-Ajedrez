PROYECTO DE AJEDREZ

DEFINICIÓN GENERAL DEL PROYECTO:

------- PROPÓSITO:

La idea principal de este proyecto es ampliar mi formación en mi futuro ámbito profesional, ya que estoy estudiando DAM, veo cosas relacionadas con Java, Git y tambíen sobre lo importante que es la documentación de un proyecto; a pesar de eso, creo que las tareas prácticas son más importantes y gratificantes. Opino que el nivel general es un poco lento y creo que esta es una buena forma para retarme e intentar superarme. Mis nociones en estos temas son MUY básicas así que cometeré muchos errores tanto en la documentación como en el propio proyecto, no espero que sea perfecto aunque lo intentaré, espero aprender.

------- OBJETIVOS:

A parte del nivel personal, el proyecto tiene como propósito la creación de un Ajedrez totalmente funcional programado en java. Las primeras versiones serán muy básicas ya que ni siquiera se crear un entorno gráfico donde el usuario pueda interactuar, por lo que al menos por ahora se compondrá por unos inputs/outputs de únicamente texto por la línea de comandos con System.out.println() y Scanner(System.in). Por esto mismo, el ajedrez se mostrará por pantalla en forma de texto "decorado" y las instrucciones del usuario deberán ser del tipo "d2 d4".

------- ESPECIFICACIÓN DE REQUERIMIENTOS:

	-(1)Crear un tablero con filas y columnas del 1 al 8.
		-(1.1)Las columnas deben de estar representadas con letras.
		-(1.2)El tablero debe tener una función muestraTablero(), que lo mostrará por pantalla, así como la puntuación actual.

	-(2)Crear todas las piezas del ajedrez.
		-(2.1)Las piezas serán objetos con atributos generales y específicos.
		-(2.2)Todas las piezas son capaces de hacer todos sus movimientos.
		-(2.3)Todas las piezas tienen restricciones sobre sus movimientos (no pueden hacer movimientos ilegales).
		-(2.4)Si se está en jaque, se deberá hacer un movimiento que lo evite.
		-(2.5)No se podrá hacer un movimiento con el cual sacrifiques al rey.

PROCEDIMIENTOS DE DESARROLLO:

------- HERRAMIENTAS UTILIZADAS:

Por ahora voy a utilizar NetBeans para la programación en Java, y Git para el control de versiones y GitHub para compartir el proyecto y llevarlo de una manera más organizada, así como poder acceder a él de forma remota.

------- PLANIFICACIÓN:

No voy a utilizar ninguna metodología de trabajo ya que es un proyecto personal en el cual avanzaré cuando me sea posible, a pesar de eso voy a tratar de mantener un orden, para esto voy a tener un documento de texto (corcho.txt) que simulará la metodología KanBan en la que añadiré una zona "To Do", otra "Doing" y otra "Done".

ARQUITECTURA:

-------	DESCRIPCIÓN JERÁRQUICA: 

	ProyectoJava
		-Exe.java
		-AjedUtils.java
		-Pieza.java
			-Peón.java
			-Torre.java
			-Caballo.java
			-Alfil.java
			-Rey.java
			-Dama.java
			-Vacío.java
		-Tablero.java

-------	DESCRIPCIÓN INDIVIDUAL DE LOS MÓDULOS:

	-ProyectoJava: (Java with Ant) El proyecto del que parten las carpetas y .java´s


	-Exe.java: 		---------------------------------------------->	  Es el archivo ejecutable, en este se realizarán todas las acciones que involucren las interacciones con el usuario. Deberá de contener:

		-Un método void main() 		------------------------------>	  en el que se importará la clase Scanner, y será el cuerpo del programa.

		-Un método void muestraTablero() 	---------------------->	  que muestre el tablero y la puntuación..

		-Un método void menu(sc) 	------------------------------>	  que servirá para encapsular el bucle de jugadas.

		-Un método boolean jugada(boolean blancas, Scanner sc) 	------>	  que pedirá al usuario su siguiente movimiento y hará las comprobaciones necesarias para decidir si tiene que repetirlo o si es válido

	
	-AjedUtils.java: 		-------------------------------------------------->	Es un archivo con multitud de utilidades necesarias para la sencilla elaboración del programa en el archivo ejecutable, entre ellas deberá contener:

		-Un método boolean comprobaciones(int f1, int c1, int f2, int c2)  ------->	que llame a todas las comprobaciones necesarias, de esta manera encapsular cada una de estas en un método distinto, facilitando así un motivo en caso de haber un movimiento ilegal.
		
		-Un método boolean compSintactica(String str)	-------------------------->	que debe devolver si el String está escrito de la manera "ax by".

		-Un método boolean compEnTablero(int f1, int c1, int f2, int c2)  -------->	que compruebe que el movimiento sucede de una casilla dentro del tablero, a otra dentro del tablero.

		-Un método boolean compTuColor(int f1, int c1, int f2, int c2)    -------->	que compruebe que estás usando una pieza de tu color.

		-Un método boolean compParticular(int f1, int c1, int f2, int c2)  ------->	que llamará al método particular de cada una de las piezas, ya que cada una tiene un tipo de movimiento distinto, con unas restricciones distintas.

		-Un método char numerosALetras(int n) 	---------------------------------->	que pase un numero a la letra correspondiente (1 -> A / 2 -> B / ...) para facilitar el uso de las filas

		-Un método int letrasANumeros(String str) 	-------------------------->	que pase de letras a numeros (A -> 1 / B -> 2 / ...) para facilitar el uso de las filas

	
	-Pieza.java: 		-------------------------------------------------->	Objeto del cual nacerán todas las piezas. Contendrá atributos y métodos generales a todas las piezas:

		-Un método comprobacionMov(int f1, int c1, int f2, int c2)   ----->	este método debe de sobreescribirse en cada pieza para que al referenciar este, se ejecute el particular de la pieza en cuestión.

		-Un método toString() @override		-------------------------->	un método toString que mostrará el nombre de la pieza. (prácticamente igual que el getNombre pero añade espacios a los lados).

		-Getter y setter de los siguientes atributos: 	 ----------------->	los getter y setter para modificar cómodamente los atributos
			-boolean esBlanco
			-int valor
			-String nombre


	-*cadapieza*.java: 		------------------------------------------------->	Cada una de las piezas particularmente. Deben de tener "extends Pieza".

		-Un método constructor(String nombre, int valor, boolean esBlanco)   ---->	método constructor para crear cada pieza en una sola línea con todos los atributos específicados.

		-(SOLO PARA LA PIEZA VACÍO): Un método toString()@override    ----------->	no solo añade espacios a los lados, añade los espacios necesarios para que al mostrar el tablero salga cuadrado.

		-Un método comprobacionMov(int f1, int c1, int f2, int c2)    ----------->	es un metodo @override del padre Pieza.java.


	-Tablero.java:			--------------------------->	Objeto abstracto que tendrá el tablero.
		
		-Un atributo: Pieza[][] tablero		----------->	un array 9x9 (el marco + el 8x8 del tablero de ajedrez) que simulará el tablero

		-Un método colocaTablero(tablero)	----------->	creará para cada posición la pieza correspondiente (en el 1,1 una torre blanca, 1,2 un caballo blanco, ...).


-------		